<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2025-01-14T05:24:24.227885</updated>
  <id>97858cfd-e9a0-42da-8a7c-aa1c1fb4f0f4</id>

  
    <entry>
      <title>スタイル -- working_style: 同期・評価順序に関連する訳語を追加</title>
      <link href="https://cpprefjp.github.io/working_style.html"/>
      <id>176b16e22b4115087dbbf9ea5337a11e0f5610bb:working_style.md</id>
      <updated>2024-11-18T14:37:41+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/working_style.md b/working_style.md
index 980f18020..0c28b90af 100644
--- a/working_style.md
+++ b/working_style.md
@@ -152,3 +152,8 @@ C++11以降対応については対応バージョンを明記します。バー
 | weak ordering                      | 弱順序                       |
 | well-formed                        | 適格                         |
 | eligible                           | 資格のある                   |
+| synchronizes with                  | に対して同期する (&amp;#34;と同期する&amp;#34; だと対称関係に見えるため) |
+| happens before                     | よりも前に発生する                                       |
+| strongly happens before            | よりも確実に前に発生する                                 |
+| sequenced before                   | よりも前に順序付けられる                                 |
+| indeterminately sequenced          | 不定順で順序付けられる                                   |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emit -- GLOBAL_DEFINED_WORDS: 表現を変更 &#34;{と =&gt; に対して}同期する&#34;</title>
      <link href="https://cpprefjp.github.io/reference/syncstream/basic_syncbuf/emit.html"/>
      <id>b609e21faa487c33a8ccc918e8d1213d877e83ae:reference/syncstream/basic_syncbuf/emit.md</id>
      <updated>2024-11-18T14:36:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/syncstream/basic_syncbuf/emit.md b/reference/syncstream/basic_syncbuf/emit.md
index 574786fff..0c8ddb62d 100644
--- a/reference/syncstream/basic_syncbuf/emit.md
+++ b/reference/syncstream/basic_syncbuf/emit.md
@@ -32,7 +32,7 @@ bool emit();
 
 
 ## 同期操作
-同じストリームバッファオブジェクトに文字を転送するすべての`emit()`呼び出しは、「よりも前に発生する」関係と一致する全順序で実行されるように見える。各`emit()`呼び出しは、その全順序で後続の`emit()`呼び出し**と同期する**。実際には、これは下記の備考にあることを意味する。
+同じストリームバッファオブジェクトに文字を転送するすべての`emit()`呼び出しは、「よりも前に発生する」関係と一致する全順序で実行されるように見える。各`emit()`呼び出しは、その全順序で後続の`emit()`呼び出し**に対して同期する**。実際には、これは下記の備考にあることを意味する。
 
 注：ここでは、「よりも前に発生する」関係は全順序関係になっていると考えられる。また、modification order と矛盾しないとも考えられる。下記の参照を参照のこと。
 
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>join -- GLOBAL_DEFINED_WORDS: 表現を変更 &#34;{と =&gt; に対して}同期する&#34;</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/join.html"/>
      <id>b609e21faa487c33a8ccc918e8d1213d877e83ae:reference/thread/jthread/join.md</id>
      <updated>2024-11-18T14:36:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/join.md b/reference/thread/jthread/join.md
index f49b4c7e9..7ee8ae32e 100644
--- a/reference/thread/jthread/join.md
+++ b/reference/thread/jthread/join.md
@@ -22,7 +22,7 @@ void join();
 
 
 ## 同期操作
-関連付けられたスレッドの完了は、`join()`メンバ関数の正常リターン**と同期する** 。
+関連付けられたスレッドの完了は、`join()`メンバ関数の正常リターン**に対して同期する** 。
 
 つまり、「`this`に関連付けられたスレッドT1上で行われる全処理の完了」は、
 「`join()`メンバ関数を呼び出したスレッドT0上での同メンバ関数からの正常リターン」**よりも前に発生する** 。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- GLOBAL_DEFINED_WORDS: 表現を変更 &#34;{と =&gt; に対して}同期する&#34;</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/op_constructor.html"/>
      <id>b609e21faa487c33a8ccc918e8d1213d877e83ae:reference/thread/jthread/op_constructor.md</id>
      <updated>2024-11-18T14:36:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/op_constructor.md b/reference/thread/jthread/op_constructor.md
index 7bdfb603e..0ec9fa89f 100644
--- a/reference/thread/jthread/op_constructor.md
+++ b/reference/thread/jthread/op_constructor.md
@@ -63,13 +63,13 @@ jthread(jthread&amp;amp;&amp;amp;) noexcept;             // (4) C++20
 
 
 ## 同期操作
-- (2) : コンストラクタ呼び出しの完了は、`f`のコピーの呼び出し開始**と同期する**
+- (2) : コンストラクタ呼び出しの完了は、`f`のコピーの呼び出し開始**に対して同期する**
     新しいスレッドを生成し、[`INVOKE`](/reference/concepts/Invoke.md)`(DECAY_COPY(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f)), DECAY_COPY(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args))...)`を実行する。ただし`DECAY_COPY`は同コンストラクタを呼び出したスレッド上にて評価される。また`f`のコピーの戻り値は無視される。
     - `DECAY_COPY(x)`は `template &amp;lt;class T&amp;gt; typename std::decay&amp;lt;T&amp;gt;::type decay_copy(T&amp;amp;&amp;amp; v) { return` [`std::forward`](/reference/utility/forward.md)`&amp;lt;T&amp;gt;(v); }` と定義される。おおよそ、`x`が配列型なら先頭要素へのポインタ、`x`が関数型ならその関数ポインタ、`x`がコピーコンストラクト可能な型なら`x`からコピーされたオブジェクト、`x`がムーブコンストラクト可能な型なら`x`からムーブされたオブジェクトとなる。
 
 
 ## 同期操作
-- (2) : 同コンストラクタの呼び出し完了は、fのコピーの呼び出し開始**と同期する**。つまり、「コンストラクタ呼び出し側スレッドT0でのコンストラクタ呼び出し完了」は、「新しいスレッド`T1`上での`f`のコピーの呼び出し開始」**よりも前に発生する**。
+- (2) : 同コンストラクタの呼び出し完了は、fのコピーの呼び出し開始**に対して同期する**。つまり、「コンストラクタ呼び出し側スレッドT0でのコンストラクタ呼び出し完了」は、「新しいスレッド`T1`上での`f`のコピーの呼び出し開始」**よりも前に発生する**。
 
 
 ## 事後条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sleep_for -- GLOBAL_DEFINED_WORDS: 表現を変更 &#34;{と =&gt; に対して}同期する&#34;</title>
      <link href="https://cpprefjp.github.io/reference/thread/this_thread/sleep_for.html"/>
      <id>b609e21faa487c33a8ccc918e8d1213d877e83ae:reference/thread/this_thread/sleep_for.md</id>
      <updated>2024-11-18T14:36:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/this_thread/sleep_for.md b/reference/thread/this_thread/sleep_for.md
index 467143e5b..0177d5b20 100644
--- a/reference/thread/this_thread/sleep_for.md
+++ b/reference/thread/this_thread/sleep_for.md
@@ -24,7 +24,7 @@ namespace this_thread {
 
 
 ## 同期操作
-特に他操作と同期する規定はない。
+特に他操作に対して同期する規定はない。
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sleep_until -- GLOBAL_DEFINED_WORDS: 表現を変更 &#34;{と =&gt; に対して}同期する&#34;</title>
      <link href="https://cpprefjp.github.io/reference/thread/this_thread/sleep_until.html"/>
      <id>b609e21faa487c33a8ccc918e8d1213d877e83ae:reference/thread/this_thread/sleep_until.md</id>
      <updated>2024-11-18T14:36:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/this_thread/sleep_until.md b/reference/thread/this_thread/sleep_until.md
index ed6c39842..7a0dde985 100644
--- a/reference/thread/this_thread/sleep_until.md
+++ b/reference/thread/this_thread/sleep_until.md
@@ -27,7 +27,7 @@ namespace this_thread {
 
 
 ## 同期操作
-特に他操作と同期する規定はない。
+特に他操作に対して同期する規定はない。
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>yield -- GLOBAL_DEFINED_WORDS: 表現を変更 &#34;{と =&gt; に対して}同期する&#34;</title>
      <link href="https://cpprefjp.github.io/reference/thread/this_thread/yield.html"/>
      <id>b609e21faa487c33a8ccc918e8d1213d877e83ae:reference/thread/this_thread/yield.md</id>
      <updated>2024-11-18T14:36:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/this_thread/yield.md b/reference/thread/this_thread/yield.md
index 84df7bbbd..edc07ef7f 100644
--- a/reference/thread/this_thread/yield.md
+++ b/reference/thread/this_thread/yield.md
@@ -20,7 +20,7 @@ namespace this_thread {
 
 
 ## 同期操作
-特に他操作と同期する規定はない。
+特に他操作に対して同期する規定はない。
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>join -- GLOBAL_DEFINED_WORDS: 表現を変更 &#34;{と =&gt; に対して}同期する&#34;</title>
      <link href="https://cpprefjp.github.io/reference/thread/thread/join.html"/>
      <id>b609e21faa487c33a8ccc918e8d1213d877e83ae:reference/thread/thread/join.md</id>
      <updated>2024-11-18T14:36:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/thread/join.md b/reference/thread/thread/join.md
index db9f496bc..51a42ba06 100644
--- a/reference/thread/thread/join.md
+++ b/reference/thread/thread/join.md
@@ -22,7 +22,7 @@ void join();
 
 
 ## 同期操作
-関連付けられたスレッドの完了は、`join()`メンバ関数の正常リターン**と同期する** 。
+関連付けられたスレッドの完了は、`join()`メンバ関数の正常リターン**に対して同期する** 。
 
 つまり、「`this`に関連付けられたスレッドT1上で行われる全処理の完了」は、
 「`join()`メンバ関数を呼び出したスレッドT0上での同メンバ関数からの正常リターン」**よりも前に発生する** 。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- GLOBAL_DEFINED_WORDS: 表現を変更 &#34;{と =&gt; に対して}同期する&#34;</title>
      <link href="https://cpprefjp.github.io/reference/thread/thread/op_constructor.html"/>
      <id>b609e21faa487c33a8ccc918e8d1213d877e83ae:reference/thread/thread/op_constructor.md</id>
      <updated>2024-11-18T14:36:09+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/thread/op_constructor.md b/reference/thread/thread/op_constructor.md
index 49758380c..5caff43ef 100644
--- a/reference/thread/thread/op_constructor.md
+++ b/reference/thread/thread/op_constructor.md
@@ -36,7 +36,7 @@ thread(thread&amp;amp;&amp;amp;) noexcept;              // (4)
 
 
 ## 同期操作
-- (2) : 同コンストラクタの呼び出し完了は、fのコピーの呼び出し開始**と同期する**。つまり、「コンストラクタ呼び出し側スレッドT0でのコンストラクタ呼び出し完了」は、「新しいスレッド`T1`上での`f`のコピーの呼び出し開始」**よりも前に発生する**。
+- (2) : 同コンストラクタの呼び出し完了は、fのコピーの呼び出し開始**に対して同期する**。つまり、「コンストラクタ呼び出し側スレッドT0でのコンストラクタ呼び出し完了」は、「新しいスレッド`T1`上での`f`のコピーの呼び出し開始」**よりも前に発生する**。
 
 
 ## 事後条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sleep_for -- thread/this_thread: 「と同期しない」を定義語に一致するように書換</title>
      <link href="https://cpprefjp.github.io/reference/thread/this_thread/sleep_for.html"/>
      <id>116fbe8198e03fed1ca994759011854e119f304b:reference/thread/this_thread/sleep_for.md</id>
      <updated>2024-11-08T21:31:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/this_thread/sleep_for.md b/reference/thread/this_thread/sleep_for.md
index b6df0ab1f..467143e5b 100644
--- a/reference/thread/this_thread/sleep_for.md
+++ b/reference/thread/this_thread/sleep_for.md
@@ -24,7 +24,7 @@ namespace this_thread {
 
 
 ## 同期操作
-特に他操作と同期しない。
+特に他操作と同期する規定はない。
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>sleep_until -- thread/this_thread: 「と同期しない」を定義語に一致するように書換</title>
      <link href="https://cpprefjp.github.io/reference/thread/this_thread/sleep_until.html"/>
      <id>116fbe8198e03fed1ca994759011854e119f304b:reference/thread/this_thread/sleep_until.md</id>
      <updated>2024-11-08T21:31:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/this_thread/sleep_until.md b/reference/thread/this_thread/sleep_until.md
index a68bba072..ed6c39842 100644
--- a/reference/thread/this_thread/sleep_until.md
+++ b/reference/thread/this_thread/sleep_until.md
@@ -27,7 +27,7 @@ namespace this_thread {
 
 
 ## 同期操作
-特に他操作と同期しない。
+特に他操作と同期する規定はない。
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>yield -- thread/this_thread: 「と同期しない」を定義語に一致するように書換</title>
      <link href="https://cpprefjp.github.io/reference/thread/this_thread/yield.html"/>
      <id>116fbe8198e03fed1ca994759011854e119f304b:reference/thread/this_thread/yield.md</id>
      <updated>2024-11-08T21:31:43+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/this_thread/yield.md b/reference/thread/this_thread/yield.md
index 76c7e836b..84df7bbbd 100644
--- a/reference/thread/this_thread/yield.md
+++ b/reference/thread/this_thread/yield.md
@@ -20,7 +20,7 @@ namespace this_thread {
 
 
 ## 同期操作
-特に他操作と同期しない。
+特に他操作と同期する規定はない。
 
 
 ## 例外
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>memory_order -- GLOBAL_DEFINED_WORDS: よりも前に発生する (happens before) / と同期する (synchronizes with) を追加</title>
      <link href="https://cpprefjp.github.io/reference/atomic/memory_order.html"/>
      <id>d960d161be544c202cede47c795757d0133daf25:reference/atomic/memory_order.md</id>
      <updated>2024-11-08T00:59:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/atomic/memory_order.md b/reference/atomic/memory_order.md
index 9657dfa02..3d9b32f90 100644
--- a/reference/atomic/memory_order.md
+++ b/reference/atomic/memory_order.md
@@ -27,7 +27,7 @@ namespace std {
 
 ## 概要
 コンパイラに許可されている最適化の一つに、「プログラムの意味を変えない限りにおいて、メモリアクセスの順番を変えたり、省略したりしてもよい」というものがある。また、マルチコアCPUにおいては、あるCPUコアによるメモリアクセスの順序が他のコアからも同じように見えるとは限らない。このような挙動はマルチスレッドプログラミングにおいて問題になることがある。
-この問題への対処として、C++11では各スレッドの実行に順序付けをするための&amp;#34;happens before&amp;#34;(先行発生)という関係を定義し、それによってあるスレッドでの操作が他スレッドから可視になるか否かを定めている。
+この問題への対処として、C++11では各スレッドの実行に順序付けをするための「よりも前に発生する」という関係を定義し、それによってあるスレッドでの操作が他スレッドから可視になるか否かを定めている。
 atomic変数においては、&amp;#34;release&amp;#34;操作によって書き込まれた値を&amp;#34;acquire&amp;#34;操作によって別のスレッドが読み出した場合に、そのrelease操作とacquire操作の間に順序付けが行われる。以下に例を挙げる。
 
 ```cpp example
@@ -65,8 +65,8 @@ int main()
 3
 ```
 
-[`atomic&amp;lt;bool&amp;gt;`](atomic.md)型の変数`ready`への読み書きに注目すると、`main()`では変数`ready`に `true` を&amp;#34;release&amp;#34;操作として書き込み、`f()`では&amp;#34;acquire&amp;#34;操作としての読み込みを `true` が返されるまで繰り返している。よって、`f()`の`while`ループを抜けた時点で、`main()`の`ready.store()`と`f()`の`ready.load()`の間に順序付け(happens before関係)が成立している。
-ここでさらに変数`data`への読み書き(1), (2)に注目すると、(1)は`ready.store()`より前、(2)は`ready.load()`より後にあるので、以下のようなスレッド間の順序付け(happens before関係)が成立することになる。
+[`atomic&amp;lt;bool&amp;gt;`](atomic.md)型の変数`ready`への読み書きに注目すると、`main()`では変数`ready`に `true` を&amp;#34;release&amp;#34;操作として書き込み、`f()`では&amp;#34;acquire&amp;#34;操作としての読み込みを `true` が返されるまで繰り返している。よって、`f()`の`while`ループを抜けた時点で、`main()`の`ready.store()`と`f()`の`ready.load()`の間に順序付け(「よりも前に発生する」関係)が成立している。
+ここでさらに変数`data`への読み書き(1), (2)に注目すると、(1)は`ready.store()`より前、(2)は`ready.load()`より後にあるので、以下のようなスレッド間の順序付け(「よりも前に発生する」関係)が成立することになる。
    (1) → `ready.store()` → `ready.load()` → (2)
 よって、(1)における書き込みが(2)の時点で可視であることが保証される。
 このようにしてC++のマルチスレッドプログラムにおける実行順序および可視性を理解することができる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>barrier -- GLOBAL_DEFINED_WORDS: よりも前に発生する (happens before) / と同期する (synchronizes with) を追加</title>
      <link href="https://cpprefjp.github.io/reference/barrier/barrier.html"/>
      <id>d960d161be544c202cede47c795757d0133daf25:reference/barrier/barrier.md</id>
      <updated>2024-11-08T00:59:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/barrier/barrier.md b/reference/barrier/barrier.md
index 9440878df..82302258b 100644
--- a/reference/barrier/barrier.md
+++ b/reference/barrier/barrier.md
@@ -43,7 +43,7 @@ namespace std {
 - 完了関数を呼び出す。`completion()`と等価。
 - フェーズ同期ポイント上でブロックされている全スレッドのブロックを解除する。
 
-完了ステップの終了は、完了ステップによりブロック解除される全ての関数呼び出しからの復帰よりも、確実に前に発生(strongly happens before)する。
+完了ステップの終了は、完了ステップによりブロック解除される全ての関数呼び出しからの復帰**よりも確実に前に発生する**。
 テンプレートパラメータ`CompletionFunction`のデフォルト値以外の特殊化においては、完了ステップの進行中にバリアオブジェクトの[`wait()`](barrier/wait.md)を除くメンバ関数が呼び出されると、その動作は未定義となる。
 
 テンプレートパラメータ`CompletionFunction`のデフォルト値は、追加で Cpp17DefaultConstructible 要件を満たす未規定の型であり、式`completion()`は何の副作用も生じない。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>emit -- GLOBAL_DEFINED_WORDS: よりも前に発生する (happens before) / と同期する (synchronizes with) を追加</title>
      <link href="https://cpprefjp.github.io/reference/syncstream/basic_syncbuf/emit.html"/>
      <id>d960d161be544c202cede47c795757d0133daf25:reference/syncstream/basic_syncbuf/emit.md</id>
      <updated>2024-11-08T00:59:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/syncstream/basic_syncbuf/emit.md b/reference/syncstream/basic_syncbuf/emit.md
index 9e828bd67..574786fff 100644
--- a/reference/syncstream/basic_syncbuf/emit.md
+++ b/reference/syncstream/basic_syncbuf/emit.md
@@ -32,9 +32,9 @@ bool emit();
 
 
 ## 同期操作
-同じストリームバッファオブジェクトに文字を転送するすべての`emit()`呼び出しは、「happens before」関係と一致する全順序で実行されるように見える。各`emit()`呼び出しは、その全順序で後続の`emit()`呼び出しと同期する。実際には、これは下記の備考にあることを意味する。
+同じストリームバッファオブジェクトに文字を転送するすべての`emit()`呼び出しは、「よりも前に発生する」関係と一致する全順序で実行されるように見える。各`emit()`呼び出しは、その全順序で後続の`emit()`呼び出し**と同期する**。実際には、これは下記の備考にあることを意味する。
 
-注：ここでは、happens before 関係は全順序関係になっていると考えられる。また、modification order と矛盾しないとも考えられる。下記の参照を参照のこと。
+注：ここでは、「よりも前に発生する」関係は全順序関係になっていると考えられる。また、modification order と矛盾しないとも考えられる。下記の参照を参照のこと。
 
 ## 備考
 ラップされたストリームに一意に関連付けられたロックを保持しながら、ラップされたストリームのメンバ関数を呼び出すことができる。つまり、同じストリームを持つ他の`basic_syncbuf`オブジェクトに対してアトミックに転送することができる。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>join -- GLOBAL_DEFINED_WORDS: よりも前に発生する (happens before) / と同期する (synchronizes with) を追加</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/join.html"/>
      <id>d960d161be544c202cede47c795757d0133daf25:reference/thread/jthread/join.md</id>
      <updated>2024-11-08T00:59:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/join.md b/reference/thread/jthread/join.md
index 560271225..f49b4c7e9 100644
--- a/reference/thread/jthread/join.md
+++ b/reference/thread/jthread/join.md
@@ -22,10 +22,10 @@ void join();
 
 
 ## 同期操作
-関連付けられたスレッドの完了は、`join()`メンバ関数の正常リターンと **同期する** 。
+関連付けられたスレッドの完了は、`join()`メンバ関数の正常リターン**と同期する** 。
 
 つまり、「`this`に関連付けられたスレッドT1上で行われる全処理の完了」は、
-「`join()`メンバ関数を呼び出したスレッドT0上での同メンバ関数からの正常リターン」よりも **前に発生する** 。
+「`join()`メンバ関数を呼び出したスレッドT0上での同メンバ関数からの正常リターン」**よりも前に発生する** 。
 
 
 ## 事後条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- GLOBAL_DEFINED_WORDS: よりも前に発生する (happens before) / と同期する (synchronizes with) を追加</title>
      <link href="https://cpprefjp.github.io/reference/thread/jthread/op_constructor.html"/>
      <id>d960d161be544c202cede47c795757d0133daf25:reference/thread/jthread/op_constructor.md</id>
      <updated>2024-11-08T00:59:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/jthread/op_constructor.md b/reference/thread/jthread/op_constructor.md
index 1c7dc5aff..7bdfb603e 100644
--- a/reference/thread/jthread/op_constructor.md
+++ b/reference/thread/jthread/op_constructor.md
@@ -63,13 +63,13 @@ jthread(jthread&amp;amp;&amp;amp;) noexcept;             // (4) C++20
 
 
 ## 同期操作
-- (2) : コンストラクタ呼び出しの完了は、`f`のコピーの呼び出し開始と同期する
+- (2) : コンストラクタ呼び出しの完了は、`f`のコピーの呼び出し開始**と同期する**
     新しいスレッドを生成し、[`INVOKE`](/reference/concepts/Invoke.md)`(DECAY_COPY(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;F&amp;gt;(f)), DECAY_COPY(`[`std::forward`](/reference/utility/forward.md)`&amp;lt;Args&amp;gt;(args))...)`を実行する。ただし`DECAY_COPY`は同コンストラクタを呼び出したスレッド上にて評価される。また`f`のコピーの戻り値は無視される。
     - `DECAY_COPY(x)`は `template &amp;lt;class T&amp;gt; typename std::decay&amp;lt;T&amp;gt;::type decay_copy(T&amp;amp;&amp;amp; v) { return` [`std::forward`](/reference/utility/forward.md)`&amp;lt;T&amp;gt;(v); }` と定義される。おおよそ、`x`が配列型なら先頭要素へのポインタ、`x`が関数型ならその関数ポインタ、`x`がコピーコンストラクト可能な型なら`x`からコピーされたオブジェクト、`x`がムーブコンストラクト可能な型なら`x`からムーブされたオブジェクトとなる。
 
 
 ## 同期操作
-- (2) : 同コンストラクタの呼び出し完了は、fのコピーの呼び出し開始と**同期する**。つまり、「コンストラクタ呼び出し側スレッドT0でのコンストラクタ呼び出し完了」は、「新しいスレッド`T1`上での`f`のコピーの呼び出し開始」よりも**前に発生する**。
+- (2) : 同コンストラクタの呼び出し完了は、fのコピーの呼び出し開始**と同期する**。つまり、「コンストラクタ呼び出し側スレッドT0でのコンストラクタ呼び出し完了」は、「新しいスレッド`T1`上での`f`のコピーの呼び出し開始」**よりも前に発生する**。
 
 
 ## 事後条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>join -- GLOBAL_DEFINED_WORDS: よりも前に発生する (happens before) / と同期する (synchronizes with) を追加</title>
      <link href="https://cpprefjp.github.io/reference/thread/thread/join.html"/>
      <id>d960d161be544c202cede47c795757d0133daf25:reference/thread/thread/join.md</id>
      <updated>2024-11-08T00:59:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/thread/join.md b/reference/thread/thread/join.md
index 9f8497d18..db9f496bc 100644
--- a/reference/thread/thread/join.md
+++ b/reference/thread/thread/join.md
@@ -22,10 +22,10 @@ void join();
 
 
 ## 同期操作
-関連付けられたスレッドの完了は、`join()`メンバ関数の正常リターンと **同期する** 。
+関連付けられたスレッドの完了は、`join()`メンバ関数の正常リターン**と同期する** 。
 
 つまり、「`this`に関連付けられたスレッドT1上で行われる全処理の完了」は、
-「`join()`メンバ関数を呼び出したスレッドT0上での同メンバ関数からの正常リターン」よりも **前に発生する** 。
+「`join()`メンバ関数を呼び出したスレッドT0上での同メンバ関数からの正常リターン」**よりも前に発生する** 。
 
 
 ## 事後条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>コンストラクタ -- GLOBAL_DEFINED_WORDS: よりも前に発生する (happens before) / と同期する (synchronizes with) を追加</title>
      <link href="https://cpprefjp.github.io/reference/thread/thread/op_constructor.html"/>
      <id>d960d161be544c202cede47c795757d0133daf25:reference/thread/thread/op_constructor.md</id>
      <updated>2024-11-08T00:59:52+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/reference/thread/thread/op_constructor.md b/reference/thread/thread/op_constructor.md
index 56b864510..49758380c 100644
--- a/reference/thread/thread/op_constructor.md
+++ b/reference/thread/thread/op_constructor.md
@@ -36,7 +36,7 @@ thread(thread&amp;amp;&amp;amp;) noexcept;              // (4)
 
 
 ## 同期操作
-- (2) : 同コンストラクタの呼び出し完了は、fのコピーの呼び出し開始と**同期する**。つまり、「コンストラクタ呼び出し側スレッドT0でのコンストラクタ呼び出し完了」は、「新しいスレッド`T1`上での`f`のコピーの呼び出し開始」よりも**前に発生する**。
+- (2) : 同コンストラクタの呼び出し完了は、fのコピーの呼び出し開始**と同期する**。つまり、「コンストラクタ呼び出し側スレッドT0でのコンストラクタ呼び出し完了」は、「新しいスレッド`T1`上での`f`のコピーの呼び出し開始」**よりも前に発生する**。
 
 
 ## 事後条件
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
</feed>