<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cpprefjp - C++日本語リファレンス</title>
  <link href="https://cpprefjp.github.io" />
  <updated>2022-06-05T14:36:24.500081</updated>
  <id>0addd85b-0223-46e2-ba81-c36dcbc8e9e4</id>

  
    <entry>
      <title>cpprefjp特有の拡張構文 -- editors_doc/specialized: GLOBAL_DEFINED_WORDS.json を説明</title>
      <link href="https://cpprefjp.github.io/editors_doc/specialized.html"/>
      <id>ec035265e1319c72bd4759aa747334b81f2c4a8c:editors_doc/specialized.md</id>
      <updated>2022-06-05T23:12:45+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/editors_doc/specialized.md b/editors_doc/specialized.md
index 81b5de8dc..e9a426118 100644
--- a/editors_doc/specialized.md
+++ b/editors_doc/specialized.md
@@ -159,6 +159,18 @@ int main() {
 
 グローバル修飾の一覧は [GLOBAL_QUALIFY_LIST.txt](https://github.com/cpprefjp/site/blob/master/GLOBAL_QUALIFY_LIST.txt) にあります。
 
+## 定義語
+
+`GLOBAL_DEFINED_WORDS.json` に定義語を登録することができます。形式は `GLOBAL_DEFINED_WORDS.json` を参照して下さい。
+
+`link` にはその定義語の解説ページへのURLを指定します。`link` が指定されている場合、任意の記事中の (コード、リンク、見出しなどを除く) 地の文にその定義語が現れた時に、自動的に `link` へのハイパーリンクが貼られます。
+
+特に解説ページの定義箇所で `&amp;lt;dfn id=&amp;#34;識別子&amp;#34;&amp;gt;定義語&amp;lt;/dfn&amp;gt;` として `id` 属性を設定して、その箇所への直接リンクすることもできます。
+
+`desc` に簡単な説明が指定されている場合、地の文にあるその定義語にマウスカーソルを合わせると説明がツールチップとして表示されます。
+
+`yomi` には平仮名およびアルファベットでその定義語の読みを指定します。現在は使用されていませんが将来的に定義語が増えてきた時に、用語集または索引ページを自動生成する時の並び替えに使われる予定です。
+
 ## リンクの存在チェック
 
 CommonMark形式のリンクや独自拡張のプログラムの修飾`link`などで生成されるHTMLにリンクが埋め込まれるとき、リンク先がサイト内へのリンクだった場合、リンク先の存在チェックも行います。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>標準規格と処理系 -- GLOBAL_DEFINED_WORDS.json を追加</title>
      <link href="https://cpprefjp.github.io/implementation-compliance.html"/>
      <id>22bb03b625f99e3e66eac6aeb9c9dbd7ba858226:implementation-compliance.md</id>
      <updated>2022-05-29T10:00:02+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/implementation-compliance.md b/implementation-compliance.md
index ac43d24b3..4ec1e6517 100644
--- a/implementation-compliance.md
+++ b/implementation-compliance.md
@@ -41,8 +41,8 @@ C++ の処理系は、翻訳を担うコンパイラと実行を担うオペレ
 診断不要とも未定義の動作になるとも明記されない規則を**診断対象規則** (diagnosable rule) と呼ぶ。
 **単一定義規則** (ODR; one definition rule) は &amp;#34;使用される変数・関数・クラスについてただ1つの定義を与えなければならない&amp;#34; という一連の規則である。
 
-- **適格** (well-formed) とはプログラムが全ての構文規則・診断対象の意味規則・単一定義規則を満たすことである
-- **不適格** (ill-formed) とはプログラムが適格でないことである
+- &amp;lt;dfn id=&amp;#34;dfn-well-formed&amp;#34;&amp;gt;適格&amp;lt;/dfn&amp;gt; (well-formed) とはプログラムが全ての構文規則・診断対象の意味規則・単一定義規則を満たすことである
+- &amp;lt;dfn id=&amp;#34;dfn-ill-formed&amp;#34;&amp;gt;不適格&amp;lt;/dfn&amp;gt; (ill-formed) とはプログラムが適格でないことである
 
 プログラムが規則に違反するとき、処理系はエラーメッセージまたは警告などを出力する。
 この出力を総称して**診断情報** (diagnostic message) または**診断メッセージ**&amp;lt;sup&amp;gt;&amp;lt;a href=&amp;#34;#note-2&amp;#34; id=&amp;#34;note_ref-2&amp;#34;&amp;gt;[注2]&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt; と呼び、その内容は処理系定義である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++国際標準規格 -- international-standard: 規格原案番号の修正 N4971 =&gt; N4968</title>
      <link href="https://cpprefjp.github.io/international-standard.html"/>
      <id>ceb41b43ca9104a239600f56d88d7d19fe6c4a84:international-standard.md</id>
      <updated>2022-05-25T06:25:04+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/international-standard.md b/international-standard.md
index c64847eb8..1f70abd2f 100644
--- a/international-standard.md
+++ b/international-standard.md
@@ -12,7 +12,7 @@ C++ の標準規格は、他にも各国の規格化団体によって国際標
 
 | 通称&amp;lt;sup&amp;gt;&amp;lt;a href=&amp;#34;#note-t1-1&amp;#34; id=&amp;#34;note_ref-t1-1&amp;#34;&amp;gt;†1&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt; | 名称 | 参照する規格案&amp;lt;sup&amp;gt;&amp;lt;a href=&amp;#34;#note-t1-2&amp;#34; id=&amp;#34;note_ref-t1-2&amp;#34;&amp;gt;†2&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt; | 規格案・原案 | `__cplusplus` |
 |:--|:--|:--|:--|:--|
-| [C++23](lang/cpp23.md) (C++2b) | ISO/IEC 14882:2023 (予定) | N4910([PDF](http://open-std.org/jtc1/sc22/wg21/docs/papers/2022/n4910.pdf)/[HTML](https://timsong-cpp.github.io/cppwp/)) | N4910 N4901 N4892 N4885 N4878&amp;lt;br/&amp;gt;N4871 N4861 | -- |
+| [C++23](lang/cpp23.md) (C++2b) | ISO/IEC 14882:2023 (予定) | N4910([PDF](http://open-std.org/jtc1/sc22/wg21/docs/papers/2022/n4910.pdf)/[HTML](https://timsong-cpp.github.io/cppwp/)) | N4910 N4901 N4892 N4885 N4878&amp;lt;br/&amp;gt;N4868 N4861 | -- |
 | [C++20](lang/cpp20.md) (C++2a) | ISO/IEC 14882:2020 | N4861&amp;lt;sup&amp;gt;&amp;lt;a href=&amp;#34;#note-t1-3&amp;#34; id=&amp;#34;note_ref-t1-3&amp;#34;&amp;gt;†3&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;([PDF](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4861.pdf)/[HTML](https://timsong-cpp.github.io/cppwp/n4861/)) | N4860 N4849 N4842 N4835 N4830&amp;lt;br/&amp;gt;N4820 N4810 N4800 N4791 &amp;lt;del&amp;gt;N4788&amp;lt;/del&amp;gt;&amp;lt;sup&amp;gt;&amp;lt;a href=&amp;#34;#note-t1-4&amp;#34; id=&amp;#34;note_ref-t1-4&amp;#34;&amp;gt;†4&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;&amp;lt;br/&amp;gt;N4778 N4762 N4750 N4741 N4727&amp;lt;br/&amp;gt;N4713 N4700 N4687 | `202002L` |
 | [C++17](lang/cpp17.md) (C++1z) | ISO/IEC 14882:2017 | N4659([PDF](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf)/[HTML](https://timsong-cpp.github.io/cppwp/n4659/)) | N4660 N4659 N4640 N4618 N4606&amp;lt;br/&amp;gt;N4594 N4582 N4567 N4527 N4431&amp;lt;br/&amp;gt;N4296 | `201703L` |
 | [C++14](lang/cpp14.md) (C++1y) | ISO/IEC 14882:2014 | N4140([PDF](https://github.com/cplusplus/draft/blob/master/papers/n4140.pdf?raw=true)/[HTML](https://timsong-cpp.github.io/cppwp/n4140/)) | N4141 N4140 N3937 N3936 N3797&amp;lt;br/&amp;gt;N3691 N3690 N3485 N3376 N3337 | `201402L` |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>C++国際標準規格 -- international-standard: 最新の規格原案を更新 (N4910)</title>
      <link href="https://cpprefjp.github.io/international-standard.html"/>
      <id>8d3fb19f694a061f70d327ef6acda4257468a319:international-standard.md</id>
      <updated>2022-05-25T06:23:49+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/international-standard.md b/international-standard.md
index f19557346..c64847eb8 100644
--- a/international-standard.md
+++ b/international-standard.md
@@ -12,7 +12,7 @@ C++ の標準規格は、他にも各国の規格化団体によって国際標
 
 | 通称&amp;lt;sup&amp;gt;&amp;lt;a href=&amp;#34;#note-t1-1&amp;#34; id=&amp;#34;note_ref-t1-1&amp;#34;&amp;gt;†1&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt; | 名称 | 参照する規格案&amp;lt;sup&amp;gt;&amp;lt;a href=&amp;#34;#note-t1-2&amp;#34; id=&amp;#34;note_ref-t1-2&amp;#34;&amp;gt;†2&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt; | 規格案・原案 | `__cplusplus` |
 |:--|:--|:--|:--|:--|
-| [C++23](lang/cpp23.md) (C++2b) | ISO/IEC 14882:2023 (予定) | N4901([PDF](http://open-std.org/jtc1/sc22/wg21/docs/papers/2021/n4901.pdf)/[HTML](https://timsong-cpp.github.io/cppwp/)) | N4901 N4892 N4885 N4878 N4871&amp;lt;br/&amp;gt;N4861 | -- |
+| [C++23](lang/cpp23.md) (C++2b) | ISO/IEC 14882:2023 (予定) | N4910([PDF](http://open-std.org/jtc1/sc22/wg21/docs/papers/2022/n4910.pdf)/[HTML](https://timsong-cpp.github.io/cppwp/)) | N4910 N4901 N4892 N4885 N4878&amp;lt;br/&amp;gt;N4871 N4861 | -- |
 | [C++20](lang/cpp20.md) (C++2a) | ISO/IEC 14882:2020 | N4861&amp;lt;sup&amp;gt;&amp;lt;a href=&amp;#34;#note-t1-3&amp;#34; id=&amp;#34;note_ref-t1-3&amp;#34;&amp;gt;†3&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;([PDF](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2020/n4861.pdf)/[HTML](https://timsong-cpp.github.io/cppwp/n4861/)) | N4860 N4849 N4842 N4835 N4830&amp;lt;br/&amp;gt;N4820 N4810 N4800 N4791 &amp;lt;del&amp;gt;N4788&amp;lt;/del&amp;gt;&amp;lt;sup&amp;gt;&amp;lt;a href=&amp;#34;#note-t1-4&amp;#34; id=&amp;#34;note_ref-t1-4&amp;#34;&amp;gt;†4&amp;lt;/a&amp;gt;&amp;lt;/sup&amp;gt;&amp;lt;br/&amp;gt;N4778 N4762 N4750 N4741 N4727&amp;lt;br/&amp;gt;N4713 N4700 N4687 | `202002L` |
 | [C++17](lang/cpp17.md) (C++1z) | ISO/IEC 14882:2017 | N4659([PDF](http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2017/n4659.pdf)/[HTML](https://timsong-cpp.github.io/cppwp/n4659/)) | N4660 N4659 N4640 N4618 N4606&amp;lt;br/&amp;gt;N4594 N4582 N4567 N4527 N4431&amp;lt;br/&amp;gt;N4296 | `201703L` |
 | [C++14](lang/cpp14.md) (C++1y) | ISO/IEC 14882:2014 | N4140([PDF](https://github.com/cplusplus/draft/blob/master/papers/n4140.pdf?raw=true)/[HTML](https://timsong-cpp.github.io/cppwp/n4140/)) | N4141 N4140 N3937 N3936 N3797&amp;lt;br/&amp;gt;N3691 N3690 N3485 N3376 N3337 | `201402L` |
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
    <entry>
      <title>constexpr if 文 -- if_constexpr: 微修正</title>
      <link href="https://cpprefjp.github.io/lang/cpp17/if_constexpr.html"/>
      <id>9bc4c4db7774260b855d984419446237e95beec5:lang/cpp17/if_constexpr.md</id>
      <updated>2020-04-03T12:36:31+09:00</updated>
      
        <summary type="html">&lt;pre&gt;&lt;code&gt;diff --git a/lang/cpp17/if_constexpr.md b/lang/cpp17/if_constexpr.md
index 753640f51..4d75b89f8 100644
--- a/lang/cpp17/if_constexpr.md
+++ b/lang/cpp17/if_constexpr.md
@@ -259,7 +259,7 @@ N3322 では、`static_assert` と同じように、
 
 - (A) 関数やメンバ関数の静的な条件分岐については、従来はテンプレート特殊化やSFINAEが用いられた。
   静的な条件分岐を用いればより自然に実装することが可能である。
-- (B) メンバ変数の静的な条件分岐については、従来は再帰的なクラスの派生とEBO(空基底最適化)の技法を用いた。
+- (B) メンバ変数の静的な条件分岐については、従来は再帰的なクラスの派生とEBO(空の基底の最適化)の技法を用いた。
   メンバ変数の条件分岐毎にクラスを派生させる必要があり、また派生による様々な制限を避けるために複雑になる。
 - (C) ブロックスコープにおける静的な条件分岐に関しては、従来は分岐毎に処理を新しいテンプレートを定義して委譲する必要があった。
   処理の間で変数を明示的に共有するために処理が複雑になる。処理が複数箇所に分断されるため読みにくく、また記述も煩雑である。
&lt;/code&gt;&lt;/pre&gt;</summary>
      
      <author>
        <name>Koichi Murase</name>
        <email>myoga.murase@gmail.com</email>
      </author>
    </entry>
  
</feed>